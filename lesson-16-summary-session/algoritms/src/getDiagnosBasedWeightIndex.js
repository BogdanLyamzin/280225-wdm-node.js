/*
Что нужно понимать и знать перед началом решения:
1. Что от вас хотят на выходе: функцию, класс, компонент и т.д. Как называется то, что от вас хотят.
2. Как будет выглядеть результат работы кода (как мы поймем, что это работает): true/false; объект; слайдер на странице и и.д.
3. Уточнить непонятные или спорные моменты задачи если они непонятны сразу по тексту задачи.
Например - является ли палиндромом строка, написанная с большой буквы.
4. Как проверить что все работает во всех возможных ситуациях: 
- тестовые данные - что мы передаем и что получаем во всех возможных правильных случаях;
- ответ в случае передачи не подходящих данных - например, объект вместо строки (что должен делать
    ваш инструмент, если получил неподходящие данные: выводить на экран предупреждение,
    выбрасывать ошибку, возвращать ошибку, возвращать false и т.д.
). Конечная цель - ясно дать понять тому, кто вызвал ваш инструмент, что данные неподходщие и 
главное - в чем они неподходящие.

Правила создания заготовки функции:
1. Придумать имя функции. Имя начинается с глагола, указывающего на то, что делает функция. 
Исключения - функции, создающие и возвращающие объект (тогда она считается функцией-конструктором и называется
    существительным с большой буквы, например - Message).
    Популярные варианты глаголов:
    - is - если функция что-то проверяет и возвращает в результате true или false;
    - calc - если функция внутри проводит какие-то рассчеты;
    - create - если функция создает какую-то структуру данных (не объект) - массив, строку и т.д.
    - convert - если функция как-то преобразовывает полученное значение;
    - get - если функция делает GET запрос и возвращает результат
2. Продумать какие у функции будут параметры, чтобы выполнить свою задачу, и как они должны называться.
- сколько ей нужна параметров;
- какие данные в них должны храниться;
- как они должны называться для удобства;
3. Подумать что она будет возвращать и написать хотя бы пустой return чтобы не забыть.


Задача: напишите функцию, которая получает рост в метрах и вес в кг пациента, и 
ставит диагноз ожирения исходя из индекса массы тела. 
Индекс массы тела рассчитывается так: вес в кг / рост в м * рост в м.
Правила диагноза:
10-15 - анорексия;
15-25 - норма;
25 - 30 - лишний вес;
30 - 35 - ожирение I степени;
35 - 40 - ожирение II степени;
40+ - ожирение III степени;

1.9, 50 => аноресия
1.9, 90 => норма
1.9, 100 => лишний вес
1.9, 110 => ожирение I степени;
1.9, 130 => ожирение II степени;
1.9, 150 => ожирение III степени;
1.9, 200 => ожирение III степени;

Выбрасываем ошибку в случае неподходящих данных.

1. Создать заготовку под функцию.
2. Выводим в консоль ее результат с тестовыми данными.
3. Рассчитать индекс массы тела, округлив до сотых.
4. Исходя из индекса массы тела вернуть диагноз.
5. Обработать случаи неподходящих данных.
6. Подумать об оптимизации кода.
*/

export const calcWeightIndex = (height, weight) =>
  Number((weight / height ** 2).toFixed(2));

export const getDiagnoseBaseWeightIndex = (height, weight) => {
  const weightIndex = calcWeightIndex(height, weight);
  if (weightIndex <= 15) {
    return "анорексия";
  } else if (weightIndex <= 25) {
    return "норма";
  } else if (weightIndex <= 30) {
    return "лишний вес";
  } else if (weightIndex <= 35) {
    return "ожирение I степени";
  } else if (weightIndex <= 40) {
    return "ожирение II";
  }
  return "ожирение III";
};

console.log(getDiagnoseBaseWeightIndex(1.9, 50));
console.log(getDiagnoseBaseWeightIndex(1.9, 90));
console.log(getDiagnoseBaseWeightIndex(1.9, 110));
console.log(getDiagnoseBaseWeightIndex(1.9, 130));
console.log(getDiagnoseBaseWeightIndex(1.9, 150));
console.log(getDiagnoseBaseWeightIndex(1.9, 2000));
