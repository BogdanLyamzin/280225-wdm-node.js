/*
Что нужно понимать и знать перед началом решения:
1. Что от вас хотят на выходе: функцию, класс, компонент и т.д. Как называется то, что от вас хотят.
2. Как будет выглядеть результат работы кода (как мы поймем, что это работает): true/false; объект; слайдер на странице и и.д.
3. Уточнить непонятные или спорные моменты задачи если они непонятны сразу по тексту задачи.
Например - является ли палиндромом строка, написанная с большой буквы.
4. Как проверить что все работает во всех возможных ситуациях: 
- тестовые данные - что мы передаем и что получаем во всех возможных правильных случаях;
- ответ в случае передачи не подходящих данных - например, объект вместо строки (что должен делать
    ваш инструмент, если получил неподходящие данные: выводить на экран предупреждение,
    выбрасывать ошибку, возвращать ошибку, возвращать false и т.д.
). Конечная цель - ясно дать понять тому, кто вызвал ваш инструмент, что данные неподходщие и 
главное - в чем они неподходящие.

Задача: напишите функцию, которая проверяет, является ли строка палиндромом.

1. Функцию.
2. Функция возвращает true если строка - палиндром, и false - если нет.
3. Регистр не учитывается.
4. Тестовые данные:
Madam => true;
hello => false;

1. Создать пустую функцию по правилам создания функций.
2. Выводим в консоль 2 раза ее результат с тестовыми данными.
3. Пишем тело функции:
    3.1. Привести изначальную строку к нижнему регистру.
    3.2. Развернуть строку задом наперед. 
    3.3. Вернуть результат сравнения исходной строки и развернутой задом наперед.
4. Проверяем работу функции во всех возможных ситуациях.
5. Думаем как мы можем оптимизировать:
- скорость работы;
- затраты памяти;
- количество строк кода не в ущерб пониманию кода и удоству его чтения;

Правила создания заготовки функции:
1. Придумать имя функции. Имя начинается с глагола, указывающего на то, что делает функция. 
Исключения - функции, создающие и возвращающие объект (тогда она считается функцией-конструктором и называется
    существительным с большой буквы, например - Message).
    Популярные варианты глаголов:
    - is - если функция что-то проверяет и возвращает в результате true или false;
    - calc - если функция внутри проводит какие-то рассчеты;
    - create - если функция создает какую-то структуру данных (не объект) - массив, строку и т.д.
    - convert - если функция как-то преобразовывает полученное значение;
    - get - если функция делает GET запрос и возвращает результат
2. Продумать какие у функции будут параметры, чтобы выполнить свою задачу, и как они должны называться.
- сколько ей нужна параметров;
- какие данные в них должны храниться;
- как они должны называться для удобства;
3. Подумать что она будет возвращать и написать хотя бы пустой return чтобы не забыть.
*/

const isPalindrom = (str) => {
  if (typeof str !== "string") {
    throw new Error("Argument must be string");
  }
//   return str.toLowerCase() === str.toLowerCase().split("").reverse().join("");
  const normalizedStr = str.toLowerCase();
  const reverseStr = normalizedStr.split("").reverse().join("");
  return normalizedStr === reverseStr;
};

console.log(isPalindrom("madam"));
console.log(isPalindrom("Madam"));
console.log(isPalindrom("hello"));
console.log(isPalindrom(111));
console.log(isPalindrom(["hello"]));
